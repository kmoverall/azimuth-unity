AZIMUTH CODING STANDARDS

All scripts are to be written in C#, NO EXCEPTIONS


When in doubt, refer to http://devmag.org.za/2012/07/12/50-tips-for-working-with-unity-best-practices/

SPACING CONVENTIONS

Tabs for indentation (Unity defaults to this, not my choice), Tabs have width 4

Open braces on same line, with one space preceding

Close braces are on their own line, with the exception of else and else if statements

Functions have no space before the parentheses

Commas always have a space immediately after

Spaces in boolen statements and arithmetic are left to developer's best judgement, and should be used to visually group order of operations
ex. a*b + c*d, not a * b+c * d


VARIABLE CONVENTIONS

Pure public variables are only to be used if the variable is intended to be modified in the inspector by non-programmers
Use [System.HideInInspector] if a variable is meant to persist between sessions but not modified in the inspector
Use [System.NonSerialized] if the public variable is not meant to be modified in the inspector and not mean to persist
Use [System.Tooltip(String)] for all non-obvious inspector-exposed variables
Set inspector to Debug to view private variable values


NAMING CONVENTIONS

Classes follow the Unity standard of PascalCase with no modifiers

Member variables are camelCased, prefixed with a letter to indicate intended nature of variable
Key:
cVarName		A component of the prefab this script is attached to. Use [RequireComponent (typeof (classname))] on class
oVarName		A GameObject external to the one this script is attached to
eVarName		A component of a GameObject external to the one this script is attached to
DEPRECATED:		gVarName		One of the "global" GameObjects stored in the scene, as dictated by the Prefabs section of this document
								No longer in use, as all global gameobjects should be singletons using static functions to access data
varName			No prefix is intrinsic properties of the script
varName			Variables exposed in the inspector have no prefix, regardless of other conditions

If access to a component's member variables is needed, it is preferred to store a reference to the component, then access that variable through the component's methods

Variables used in the scope of a single function are camelCased with no prefix

Booleans should take the form of a true or false statement, such as isNodeActive, as opposed to nodeActive

Constants use ALL_CAPS_SNAKE_CASE

Enums use PascalCase with PascalCase fields. ex. SeasonEffect.InSummer

Iterators use single letter names, using i, j, and k in that order as available


PREFAB CONVENTIONS

All scene-level global data and functions are to be contained in a script named after the current scene, stored on an empty gameobject located at the origin

All data and functions that reoccur between scenes are to be contained in a GameMode script, stored on an empty gameobject located at the origin

Elements in the scene are to be organized using empty game objects


ASSET REQUIREMENTS

All sprites that are "seasonal" require 5 sprite maps: A masking map, to be used as the main sprite texture, which paints out the bounds of the sprite,
plus one sprite map for each season, with the actual sprites laid over.